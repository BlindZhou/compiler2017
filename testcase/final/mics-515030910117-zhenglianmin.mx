int counter = 0;
class ConstructorTester {
    int ct;
    ConstructorTester() {
        ct = counter++;
        println("Constructed - " + toString(this.ct));
    }
}
void testConstructor() {
    ConstructorTester a = new ConstructorTester;
    ConstructorTester[] b = new ConstructorTester[5];
    ConstructorTester[][] c = new ConstructorTester[4][4];
    ConstructorTester[][][] d = new ConstructorTester[3][3][3];
    ConstructorTester[][][][] e = new ConstructorTester[2][2][2][];

    int i; int j; int k;
    for (i = 0; i < e.size(); i++) {
        for (j = 0; j < e[i].size(); j++) {
            for (k = 0; k < e[j].size(); k++) {
                e[i][j][k] = new ConstructorTester[1];
            }
        }
    }
}

class SideEffectTester {
    int ct;

    SideEffectTester() {
        ct = 0;
    }

    SideEffectTester getSelf() {
        ct++;
        return this;
    }
}
void testSideEffect() {
    SideEffectTester a = new SideEffectTester;

    println(toString(a.ct));
    a.getSelf();
    println(toString(a.ct));
    a.getSelf().ct++;
    println(toString(a.ct));
    ++a.getSelf().ct;
    println(toString(a.ct));
    println(toString(++a.getSelf().ct));
    println(toString(a.getSelf().ct++));
    println(toString(a.ct));
}

void testManyLogic() {
    bool a = true;  //getInt() == 1;
    bool b = false; //getInt() == 1;

    if (a && a && a && a && a && a && a && a && a && a && a && a && a && a && a && a &&
        a && a && a && a && a && a && a && a && a && a && a && a && a && a && a && a) {
        println("1 - true");
    } else {
        println("1 - false");
    }

    if (b || b || b || b || b || b || b || b || b || b || b || b || b || b || b || b ||
        b || b || b || b || b || b || b || b || b || b || b || b || b || b || b || b ) {
        println("2 - true");
    } else {
        println("2 - false");
    }

    if (!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!a) {
        println("3 - true");
    } else {
        println("3 - false");
    }
}

int main() {
    testConstructor();
    testSideEffect();
    testManyLogic();
    return 0;
}


/*!! metadata:
=== comment ===
some correctness test
=== input ===
=== assert ===
output
=== timeout ===
1.0
=== output ===
Constructed - 0
Constructed - 1
Constructed - 2
Constructed - 3
Constructed - 4
Constructed - 5
Constructed - 6
Constructed - 7
Constructed - 8
Constructed - 9
Constructed - 10
Constructed - 11
Constructed - 12
Constructed - 13
Constructed - 14
Constructed - 15
Constructed - 16
Constructed - 17
Constructed - 18
Constructed - 19
Constructed - 20
Constructed - 21
Constructed - 22
Constructed - 23
Constructed - 24
Constructed - 25
Constructed - 26
Constructed - 27
Constructed - 28
Constructed - 29
Constructed - 30
Constructed - 31
Constructed - 32
Constructed - 33
Constructed - 34
Constructed - 35
Constructed - 36
Constructed - 37
Constructed - 38
Constructed - 39
Constructed - 40
Constructed - 41
Constructed - 42
Constructed - 43
Constructed - 44
Constructed - 45
Constructed - 46
Constructed - 47
Constructed - 48
Constructed - 49
Constructed - 50
Constructed - 51
Constructed - 52
Constructed - 53
Constructed - 54
Constructed - 55
Constructed - 56
0
1
3
5
7
8
9
1 - true
2 - false
3 - false
=== phase ===
optim extended
=== is_public ===
True

!!*/